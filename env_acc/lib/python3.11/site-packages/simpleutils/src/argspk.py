# -*- coding: utf-8-*-
"""
Moduł zawiera tylko 1 funkcję. Funkcja jest używana w module 'argparse' do
parsowania argumentów zapisanych w pliku tekstowym. Zgodnie z dokumentacją
nadpisuje oryginalną metodę.

Poniższe dotyczy wykorzystania funkcji 'convert_arg_line':

Funkcja do generowania mapy argumentów. Jeśli argumentów skryptu jest więcej
zamiast pisać ręcznie 'mapę' argumentów można użyć takiej funkcji w module
parsera:

def mapa_args():
    k1 = ['location']
    v1 = ['location']

    k2 = ['radius', 'utm_zone', 'out_dir', 'out_name']
    v2 = ['-r', '-u', '-o', '-n']

    keys = [*k1, *k2]
    vals = [*v1, *v2]
    return dict(zip(keys, vals))
"""
# --

mapa = None


def convert_arg_line(line: str) -> list:
    """Parsuje dane wejściowe skryptu zapisane w pliku txt. Funckja przyjmuje
        pojedynczą linię zapisaną w pliku i parsuje ją.

    UWAGA: funkcja wymaga zdefiniowania mapy argumentów w każdym skrypcie.
           Mapa ta pozwala odróżnić argumenty pozycyjne od opcjonalnych.
           Kluczami mapy są pełne nazwy argumentów bez '-' na początku,
           a wartościami:
               - dla arg. pozycyjnych: pełna nazwa, czyli klucz = wartość
               - dla arg. opcjonalnych: krótka opcja z '-', np. '-r'
          Przykładowa mapa dla:

          mapa = {'pozycyjny1': 'pozycyjny1', 'opcjonalny1': '-o1'}

    UWAGA:
          Mapę należy przypisać do zmiennej tego modułu:
              - args_from_file.mapa = mapa

    Args:
        - line:  str, 'arg_name = values'

    Ruturns:
        - list:  - [value] - dla argumentu pozycyjnego
                 - ['-key', value]  - dla argumentu opcjonalnego
    """
    global mapa

    line = [x.strip() for x in line.split('=')]
    key = mapa.get(line[0])
    # print(f'key: {key}, line: {line}\n\n')

    # argumenty pozycyjne - nie posiadają flagi
    if not key.startswith('-'):
        res = [line[1]]

    else:
        res = [key, line[1]]

    return res
# --
