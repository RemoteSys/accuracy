# -*- coding: utf-8-*-
"""
"""
from tabulate import tabulate
from textwrap import fill
from simpleutils.src.printpk import PrintPk as ppr
# --


def calc_len(kwargs: dict):
    keys = list(kwargs.keys())
    lenght = max([len(x) for x in keys])
    return lenght
# --

# poprzednia wersja funkcji
def verbose1(**kwargs):
    """Funkcja przeznaczona do wyświetlania dodatkowych informacji
    w trakcie działania skrytptu, czyli przy włączonej opcji
    verbose.

    Wyświetla 2 rodzaje informacji:
        - argparse.namespace - wprowadzone argumenty skrytptu
        - dowolne inne informacje wprowadzone jako słownik

    Uwaga:
        1. **kwargs musi zawierać wpis: {'verbose': True} aby zostały
           wyświetlone pozostałe pozycje **kwargs.
        2. {'pars': True} - ta opcja używana jest dla wyswietlania argumentów
    """
    verbose = kwargs.get('verbose', False)
    if verbose:
        kwargs.pop('verbose')

    pars = kwargs.get('pars', False)
    if pars:
        kwargs.pop('pars')

    n = calc_len(kwargs) + 1

    if pars:
        template = '{key:<{n}}:{sep}{val}'
        sep = 2 * ' '
    else:
        template = '{key:>{n}}:\n{sep}\n{val}\n'
        sep = (n + 2) * '-'

    if verbose:
        if pars:
            print('\n', 30*'_ _', '\n')

        for k, v in kwargs.items():
            print(template.format(key=k, val=v, sep=sep, n=n))

        if pars:
            print('\n', 30*'_ _', '\n\n')
# --


def verbose2(**kwargs):
    """Funkcja przeznaczona do wyświetlania dodatkowych informacji
    w trakcie działania skrytptu, czyli przy włączonej opcji
    verbose.

    Wyświetla 2 rodzaje informacji:
        - argparse.namespace - wprowadzone argumenty skrytptu
        - dowolne inne informacje wprowadzone jako słownik

    Uwaga:
        1. **kwargs musi zawierać wpis: {'verbose': True} aby zostały
           wyświetlone pozostałe pozycje **kwargs.
        2. {'pars': True} - ta opcja używana jest dla wyswietlania argumentów
    """
    verbose = kwargs.get('verbose', False)
    if verbose:
        kwargs.pop('verbose')

    pars = kwargs.get('pars', False)
    if pars:
        kwargs.pop('pars')

    n = calc_len(kwargs) + 1

    if verbose:
        if pars:
            print('\n', 30*'_ _', '\n')
            template = '{key:<{n}}:{sep}{val}'
            sep = 2 * ' '

            for k, v in kwargs.items():
                print(template.format(key=k, val=v, sep=sep, n=n))

            print('\n', 30*'_ _', '\n\n')

        else:
            for k, v in kwargs.items():
                sep = (n + 2) * '-'
                if isinstance(v, list) or isinstance(v, dict):
                    template = '{key:>{n}}:\n{sep}\n'
                    print(template.format(key=k, sep=sep, n=n))
                    ppr(v)
                    print('\n')
                else:
                    template = '{key:>{n}}:\n{sep}\n{val}\n'
                    print(template.format(key=k, val=v, sep=sep, n=n))
# --


def verbose(**kwargs):
    """Funkcja przeznaczona do wyświetlania dodatkowych informacji
    w trakcie działania skrytptu, czyli przy włączonej opcji
    verbose.

    Wyświetla 2 rodzaje informacji:
        - argparse.namespace - wprowadzone argumenty skrytptu
        - dowolne inne informacje wprowadzone jako słownik

    Uwaga:
        1. **kwargs musi zawierać wpis: {'verbose': True} aby zostały
           wyświetlone pozostałe pozycje **kwargs.
        2. {'pars': True} - ta opcja używana jest dla wyswietlania argumentów
    """
    verbose = kwargs.get('verbose', False)
    if verbose:
        kwargs.pop('verbose')

    pars = kwargs.get('pars', False)
    if pars:
        kwargs.pop('pars')

    n = calc_len(kwargs) + 1

    if verbose:
        if pars:
            print('\n', 50*'_ _', '\n')
            print(tabulate(kwargs.items(), tablefmt='plain'))
            print('\n', 50*'_ _', '\n\n')

        else:
            template = '{key:>{n}}:\n{sep}\n{val}\n'

            for k, v in kwargs.items():
                sep = (n + 2) * '-'
                if isinstance(v, list):
                    v = tabulate(v, tablefmt='plain')

                elif isinstance(v, dict):
                    v = tabulate(v.items(), tablefmt='plain')

                elif isinstance(v, str):
                    v = fill(v, width=110)

                print(template.format(key=k, val=v, sep=sep, n=n))
# --
